Install Docker
- Reference: https://docs.docker.com/engine/install/debian/
- "sudo apt-get update"
- If cannot run sudo apt-get update
	- Run "date" command. Check if the date is not set to present time
	- Need to install ntp to set date to present time
	- "sudo apt-get install ntp"
	- "sudo service ntp start"
	- Run "date" command again and verify that the date has been set to present time
	- To syncronize the date for whenever you exit your VM
		- Install ntpdate using "sudo apt-get install ntpdate"
		- run "sudo ntpdate pool.ntp.org" to set the date and time to the current time on the ntp server
		- Enable ntp service again by running "sudo systemctl start ntp", followed by "sudo systemctl enable ntp"
- "sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release"
- "sudo mkdir -p /etc/apt/keyrings"
- "curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg"
- "echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null"
- "sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin"
- run "sudo docker run hello-world" or "docker version" to verify that docker has been installed

Install Nginx
- "sudo apt update"
- "sudo apt install nginx"
- "sudo systemctl start nginx"
- If you are getting an error starting nginx, and you are using the same vm as you did for born2beroot, chances are there is another service on port 80
	- run "sudo lsof -i :80" to check what service is using port 80
	- run "sudo service <service-name> stop" to stop the service
- run "sudo systemctl status nginx" to verify that nginx is running


Learn how to display an html page on http://localhost:80
- Create an HTML file first (Name it index.html)
	- A basic HTML file looks like this:

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Hello World</title>
		<link rel="stylesheet" href="styles.css">
	</head>
	<body>
		<header>
			<h1>Hello World!</h1>
		</header>
	</body>
</html>

- Now that you have nginx installed, create the directory to store your HTML file
	- The default web root directory is /var/www/html for Debain/Linux
	- (eg. "sudo mkdir /var/www/html/hello-world" to create a directory for your HTML file)
	- Store your index.html file inside the hello-world folder
- Configure nginx to serve your html file
	- "sudo vim /etc/nginx/sites-enabled/default"
- Under the existing server {}, create a new server{}:

server {
    listen 80;
    server_name localhost;
    root /var/www/html/hello-world;
    index index.html;
    location / {
        try_files $uri $uri/ =404;
    }
}

- Reload nginx with the command "sudo systemctl reload nginx"
- Go to your browser and search for "http://localhost" or "http://localhost:80" and you should see "Hello World!" printed on the screen

Learn how to display an html page on https://localhost:443 (with SSL)
- Remember to port-forward 443 in your VM settings
	- Name: Any name
	- Protocol: TCP
	- Host IP: 127.0.0.1
	- Host Port: 443
	- Guest IP: 10.0.2.15
	- Guest Port: 443
- If you have ufw or any other firewall enabled, remember to allow access to port 443 in your firewall
	- "sudo ufw allow 443" to allow port 443
	- "sudo ufw status" to check if port 443 is allowed
- Reuse the same HTML file from hello-world
	- "cd /var/www/html"
	- "sudo mkdir ssl-helloworld"
	- "sudo cp hello-world/index.html ssl-helloworld/index.html"
- Change header in the index.html so we know its working properly
	- "sudo vim ssl-helloworld/index.html"
	- Rename the "Hello World!" in the <h1> to "Hello World with SSL!" (eg. <h1>Hello World with SSL!</h1>)
- "cd /etc/nginx/conf.d" to go begin creating our certificate and key
	- "sudo openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj "/CN=localhost"" to create our own self-signed certificate
- "sudo vim /etc/nginx/sites-enabled/default" to configure our nginx again
- Under the server{} we created, create a new server{}:

server {
    listen 443 ssl;
    server_name localhost;
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;

    root /var/www/html/ssl-helloworld;
    index index.html;

    location / {
        try_files $uri $uri/ =404;
    }
}

- Reload nginx with the command "sudo systemctl reload nginx"
- Go to your browser and search for "https://localhost" or "https://localhost:443"
	- It may say something like "Dangerous website do not continue" etc. but just click proceed anyways
	- You should see "Hello World with SSL!" printed on the screen
